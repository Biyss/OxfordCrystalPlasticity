#######################################
#       Version 3 of Neper
# Code created by Alvaro Martinez Pechero and Eralp Demir
# alvaro.martinezpechero@eng.ox.ac.uk
#######################################


def Neper2Abaqus(filename, matID ,noDepvar):
    import numpy as np
    import pandas as pd
    
    # Set material ID:
    # - enter "0" to use Neper phase output
    # - enter "1-10" material ID number if user defined!


    filename = filename
    with open(filename+".msh", "r+") as fid:
        tlines = []
        for tline in fid:
            tlines.append(tline.rstrip("\n"))
    slines = [str(tline) for tline in tlines]
    # Find the header line

    st = slines.index("$Nodes")
    header_line = slines.index("$Nodes")
    # Find the cell that starts with the total node number
    tot_nodes = int(slines[header_line + 1])

    # Read node coordinates
    crds = np.zeros((tot_nodes+1, 4))

    ###########

    for i in range(st + 2, st + 2 + tot_nodes): # the -1
        dummy = [float(x) for x in slines[i].split()]
        ii = int(dummy[0])
        crds[ii, 0:4] = dummy[0:4]

    st = slines.index("$EndElements")
    dummy = [int(x) for x in slines[st-1].split()]
    ntag = dummy[2]
    neltyp = dummy[1]
    ch = 'PS' # plane stress by default

    if neltyp == 2:
        eltyp = 'C' + ch + '3'
        nnpel = 3
        numpt = 1

    elif neltyp == 3:
        eltyp = 'C' + ch + '4'
        nnpel = 4
        numpt = 4

    elif neltyp == 9:
        eltyp = 'C' + ch + '6'
        nnpel = 6
        numpt = 3

    elif neltyp == 16:
        eltyp = 'C' + ch + '8'
        nnpel = 8
        numpt = 4

    elif neltyp == 4:
        eltyp = 'C3D4'
        nnpel = 4
        numpt = 1

    elif neltyp == 6:
        eltyp = 'C3D6'
        nnpel = 6
        numpt = 2

    elif neltyp == 5:
        eltyp = 'C3D8'
        nnpel = 8
        numpt = 8

    elif neltyp == 11:
        eltyp = 'C3D10'
        nnpel = 10
        numpt = 4

    elif neltyp == 18:
        eltyp = 'C3D15'
        nnpel = 15
        numpt = 9

    elif neltyp == 17:
        eltyp = 'C3D20'
        nnpel = 20
        numpt = 27


    # Total number of elements
    # Read from bottom line until the  <eltyp changes>
    i = 0
    etyp = neltyp
    while etyp == neltyp:
        i = i + 1
        dummy = [float(x) for x in slines[st-i].split()]#CHECK THIS ONE
        if len(dummy) > 1:
            etyp = dummy[1]
        else:
            break
    tot_els = i - 1

    # Read connectivity
    conn = np.zeros((tot_els, nnpel+1))
    # Grain ids
    grains = np.zeros((tot_els, 1))
    # Phase ids
    phases = np.zeros((tot_els, 1))
    
    
    # CHANGES OF NEW VERSION materials 
    materials = np.ones((tot_els, 1)) * matID
    
    ii = tot_els - 1
    for i in range(st-1, st-1-tot_els, -1): #CHECK THIS ONE
        dummy = np.fromstring(slines[i], dtype=int, sep=' ')
        # Connectivity
        conn[ii] = np.append([dummy[0]], dummy[3+ntag:3+ntag+nnpel+1])#CHECK THIS ONE
        grains[ii] = dummy[3]
        # Last tag is assumed to be the phase id
        # It is normally zero so set to some number
        phases[ii] = dummy[2+ntag]
        # Element index
        ii -= 1

    st = slines.index("$EndPhysicalNames")
    cc = slines[st-1]
    aa = [int(x) for x in cc.split()[:2]]
    nextindex = len(cc.split()[:2]) + 1
    ee = str(aa[1])
    dd = cc[nextindex:]
    setname = dd[:-len(ee)]

    st = slines.index('$ElsetOrientations')


    tot_grains = int(slines[st + 1].split()[0])

    eulers = np.zeros((tot_grains, 3))

    for i in range(st + 2, tot_grains + st + 2):
        dummy = [float(j) for j in slines[i].split()]
        eulers[int(dummy[0]) - 1, :] = dummy[1:4]

    euler = np.zeros((tot_els, 3))
    for i in range(tot_els):
        grnid = int(grains[i])
        euler[i, :] = eulers[grnid - 1, :]

    grain_order, grain_record = np.unique(grains, return_index=True)
    phase_order = phases[grain_record]
    material_order = materials[grain_record]
    euler_angle1 = euler[grain_record, 0]
    euler_angle2 = euler[grain_record, 1]
    euler_angle3 = euler[grain_record, 2]  





    ################################################################################
    ## WRITE TO THE FILE FROM HERE
    ################################################################################  
    print(filename)
    with open("{}.inp".format(filename), "w") as inp_file:
        inp_file.write("** Generated by Neper and modified by: Neper2Abaqus.m\n")
        inp_file.write("**PARTS\n**\n")
        inp_file.write("*Part, name=NEPER\n")
        inp_file.write("*NODE\n")
        for crd in crds[1:]:   #REVISE -1
            inp_file.write("{},\t{:e},\t{:e}, \t{:e}\n".format(int(crd[0]), crd[1], crd[2], crd[3]))

        inp_file.write("*Element, type={}\n".format(eltyp))
        #inp_file.write("hola")  
        sstr = ""
        for i in range(nnpel):
            sstr += "       {:d},"
        sstr += "       {:d}\n"
    ####################################
        intconn=np.asarray(conn, dtype = 'int')
        for conn_row in intconn:
            inp_file.write(sstr.format(*conn_row))
            #print(conn_row)
    ####################################

        unique_grains=np.unique(grains)
        for ii in range(len(unique_grains)):
            integergrainorder=int(grain_order[ii])
            inp_file.write(f"*Elset, elset=GRAIN-{integergrainorder}\n")
            #print('gr',gr)
            grain_elements = conn[int(grain_order[ii])]
            for ee in range(0,len(conn[(grains == grain_order[ii]).ravel()][:,0]),9):
                inp_file.write(", ".join(str(int(e)) for e in conn[(grains == grain_order[ii]).ravel()][ee:ee+9,0]) + "\n")
            numels = 0
            for tt in range(len(grain_elements)):
                numels += 1




        uniPhases = np.unique(phases)
        for ii in range(len(np.unique(phases))):
            inp_file.write(f"\n*Elset, elset=Phase-{ii + 1}\n")        
            elem_for_ii = conn[(phases == uniPhases[ii]).ravel()]
            for ee in range(0,len(elem_for_ii[:,0]),9):
                inp_file.write(", ".join(str(int(e)) for e in elem_for_ii[ee:ee+9,0]) + "\n")


        for ii in range(len(grain_order)):
            inp_file.write("\n**Section: Section_Grain-%d\n" % grain_order[ii])
            inp_file.write("*Solid Section, elset=GRAIN-%d, material=MATERIAL-GRAIN%d\n" % (grain_order[ii], grain_order[ii]))
            inp_file.write(",\n")




        # Write the closing keyword
        inp_file.write("*End Part\n")

        # Write the assembly information
        inp_file.write("**\n**ASSEMBLY\n**\n")
        inp_file.write("*Assembly, name=Assembly\n**\n")
        inp_file.write("*Instance, name=NEPER-1, part=NEPER\n")

        # Write the nodes
        inp_file.write("*NODE\n")
        for i in range(1,len(crds[:,0])):
            inp_file.write(f"{int(crds[i, 0])},\t{'{:.6e}'.format(crds[i, 1])},\t{'{:.6e}'.format(crds[i, 2])},\t{'{:.6e}'.format(crds[i, 3])}\n")
            #inp_file.write("%d, %.2f, %.2f, %.2f\n" % (i+1, nodes[i, 1], nodes[i, 2], nodes[i, 3]))            

        inp_file.write('*Element, type=' + eltyp + '\n')
        sstr = ''
        #print(conn[-1])

        
        for i in range(len(conn)):
            intconn2=np.asarray(conn[i], dtype = 'int')
            line = ','.join(str(x) for x in intconn2)
            inp_file.write(line + '\n')        
        
        
        

        inp_file.write('\n*End Instance\n')
        inp_file.write('**\n')
        inp_file.write('*End Assembly\n**MATERIALS\n**\n')

        #import material parameters to be used in the development of materials
        #for each grain.
        df = pd.read_excel('PROPS.xlsx', sheet_name='Material_parameters', usecols="A", header=None)
        A16 = np.array(df.iloc[0:6, :])

        # Flag for reading the inputs from the file or material library
        # "0": material library in usermaterial.f will be used
        # "1": use the material parameters in excel file       

        if A16[5] == 0:
            A = [""] * 6
  
            A[5] = 0 #CHANGE HERE
            noPROPS = 6

        # Flag for reading the inputs from the file or material library
        # "0": material library in usermaterial.f will be used
        # "1": use the material parameters in excel file              

        else:
            A = [""] * 250

            A[5] = 1
            noPROPS = 250

        #noDepvar = 1;



        for ii in range(len(grain_order)):
            inp_file.write("\n*Material, name=MATERIAL-GRAIN%d" % int(grain_order[ii]))
            inp_file.write(f"\n*Depvar\n{noDepvar},")
            inp_file.write(f"\n*User Material, constants={noPROPS}\n")

            A[0:3] = [euler_angle1[ii], euler_angle2[ii], euler_angle3[ii]]
            A[3] = int(grain_order[ii])
            # PHASE ORDER ID 
            if matID>0:
                A[4] = int(material_order[ii])
            else:
                A[4] = int(phase_order[ii])

            if A16[5] ==1:
                for iph in uniPhases:
                    #print(iph)
                    letter = chr(int(iph) + 64)
                    xlRange = f"{letter}1:{letter}250"#CHANGE
                    df = pd.read_excel("PROPS.xlsx", sheet_name='Material_parameters', usecols="A", header=None)
                    B = np.array(df.iloc[0:251, :]).flatten()
                    #print(B)
                    #B=tolist(B)

                    # All parameters
                    A[6:251] = B[6:251]


            #print(A)
            for i in range(0, len(A), 8):
                if i+8<=len(A):
                    A[i+7]=A[i+7].item()
                inp_file.write(",".join(str(x) for x in A[i:i+8]) + "\n")


        inp_file.write("\n**")
        inp_file.write("\n**\n** STEP: Loading\n**\n*Step, name=Loading, nlgeom=YES, inc=10000\n*Static\n0.01, 10., 1e-05, 1.")
        inp_file.write("\n**\n** OUTPUT REQUESTS\n**")
        inp_file.write("\n*Restart, write, frequency=0\n**")
        inp_file.write("\n** FIELD OUTPUT: F-Output-1\n**\n*Output, field, variable=PRESELECT\n**")
        if noDepvar>0:
            inp_file.write("\n** FIELD OUTPUT: F-Output-2\n**\n*Element Output, directions=YES\nSDV,\n**")
        inp_file.write("\n** HISTORY OUTPUT: H-Output-1\n**\n*Output, history, variable=PRESELECT\n**")
        inp_file.write("\n*End Step")

    inp_file.close()
